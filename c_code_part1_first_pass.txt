/*
 * Pseudo-C translation of assembly.txt (addresses 0x0000 - 0x0057)
 * This is a first pass and focuses on the direct semantics of each
 * instruction. Hardware registers are represented as memory accesses.
 */

#include <stdint.h>

#define MEM(addr) (*(volatile uint8_t*)(addr))

void routine(void) {
    /* 0x0000: SEI - disable interrupts */
    // no direct C equivalent

    /* 0x0001: LDA #$11 */
    uint8_t A = 0x11;
    /* 0x0003: STA $8002 */
    MEM(0x8002) = A;

    /* 0x0006: JMP $8000 */
    goto addr_8000;

addr_8000:
    /* 0x0009: TXS */
    // transfer X to stack pointer -- not modelled

wait_vblank_start:
    /* 0x000A: LDA $2002 */
    A = MEM(0x2002);
    /* 0x000D: BPL $000a */
    if ((A & 0x80) == 0) goto wait_vblank_start;

wait_vblank_end:
    /* 0x000F: LDA $2002 */
    A = MEM(0x2002);
    /* 0x0012: BPL $000f */
    if ((A & 0x80) == 0) goto wait_vblank_end;

    /* 0x0014: LDY #$fe */
    uint8_t Y = 0xFE;
    /* 0x0016: LDX #$05 */
    uint8_t X = 0x05;

loop_1:
    /* 0x0018: LDA $07d7,X */
    A = MEM(0x07D7 + X);
    /* 0x001B: CMP #$0a */
    if (A >= 0x0A) goto after_loop_1;
    /* 0x001F: CA DEX */
    X--;
    /* 0x0020: BPL $0018 */
    if ((int8_t)X >= 0) goto loop_1;

after_loop_1:
    /* 0x0022: LDA $07ff */
    A = MEM(0x07FF);
    /* 0x0025: CMP #$a5 */
    if (A != 0xA5) {
        /* 0x0029: LDY #$d6 */
        Y = 0xD6;
    }
    /* 0x002B: JSR $90cc */
    // call to subroutine at 0x90CC

    /* 0x002E: STA $4011 */
    MEM(0x4011) = A;
    /* 0x0031: STA $0770 */
    MEM(0x0770) = A;

    /* 0x0034: LDA #$a5 */
    A = 0xA5;
    /* 0x0036: STA $07ff */
    MEM(0x07FF) = A;
    /* 0x0039: STA $07a7 */
    MEM(0x07A7) = A;

    /* 0x003C: LDA #$0f */
    A = 0x0F;
    /* 0x003E: STA $4015 */
    MEM(0x4015) = A;

    /* 0x0041: LDA #$06 */
    A = 0x06;
    /* 0x0043: STA $2001 */
    MEM(0x2001) = A;

    /* 0x0046: JSR $8220 */
    // subroutine at 0x8220
    /* 0x0049: JSR $8e19 */
    // subroutine at 0x8E19

    /* 0x004C: INC $0774 */
    MEM(0x0774)++;

    /* 0x004F: LDA $0778 */
    A = MEM(0x0778);
    /* 0x0052: ORA #$80 */
    A |= 0x80;
    /* 0x0054: JSR $8eed */
    // subroutine at 0x8EED using A

    /* 0x0057: JMP $8057 */
    goto addr_8057;

addr_8057:
    // further code not yet translated
    ;
}
